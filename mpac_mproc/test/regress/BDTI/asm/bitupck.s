
BASE_ADDR = 0x2400
  
  {	MOVI.L R0, 0x10C0	   |	MOVI.L A0, 0x101C  	 |	NOP    	|	MOVI.L A0, 0x101C	   |	NOP	}    ; add by JH
	{	MOVI.H R0, BASE_ADDR |	MOVI.H A0, BASE_ADDR |	CLR D4	|	MOVI.H A0, BASE_ADDR |	MOVIU AC7, 16	}
	
	{	NOP |	MOVI.L A6, 0x1000  	 |	NOP    	|	MOVI.L A6, 0x1000	   |	NOP	}  ; add by JH
	{	LW R1, R0, 0	|	LW D15, A0, 4+	|	MOVIU AC7, 16	|	MOVI.H A6, BASE_ADDR	|	MOVIU D6, 7	}
	{	NOP	|	MOVI.H A6, BASE_ADDR	|	MOVIU D6, 7	|	LHU D4, A0, 2+	|	NOP	}
	
	{	NOP	|	CLR A7	|	NOP	|	LNW D15, A0, 4+	|	NOP	}
	{	NOP |	MOVI.L A5, 0x106C  	 |	NOP    	|	MOVI.L A5, 0x106E	   |	NOP	}  ; add by JH
	{	SRAI R1, R1, 1	|	LNW A2, A6, A7	|	UNPACK2 AC2, D15	|	MOVI.H A5, BASE_ADDR	|	NOP	}
	{	ADDI R1, R1, -2	|	MOVI.H A5, BASE_ADDR	|	SUB AC0, AC7, AC2	|	SRAI.D A7, D4, 3	|	NOP	}
	
	{	SGTI R7, P2, P3, R1, 0	|	NOP	|	PERMH2 D14, AC2, D4, 2, 0	|	LNW A2, A6, A7	|	UNPACK2 AC2, D15	}
	{	NOP	|	LW D15, A0, 4+	|	ADD D4, D4, AC2	|	NOP	|	SUB AC0, AC7, AC2	}
	{	NOP	|	EXTRACTU D8, A2, D14	|	ADD D4, D4, AC3	|	NOP	|	PERMH2 D14, AC2, D4, 2, 0	}
	{	NOP	|	SRAI A7, D4, 3	|	SLL D8, D8, AC0	|	NOP	|	NOP	}
	{	NOP	|	AND D5, D4, D6	|	UNPACK2 AC2, D15	|	LNW D15, A0, 4+	|	ADD D4, D4, AC2	}
	{	NOP	|	LNW A2, A6, A7	|	SUB AC0, AC7, AC2	|	EXTRACTU D8, A2, D14	|	ADD D4, D4, AC3	}
	{	NOP	|	SH D8, A5, 4+	|	PERMH2 D14, AC2, D5, 2, 0	|	SRAI A7, D4, 3	|	SLL D8, D8, AC0	}
_LOOP:	
	{	(P2)B _LOOP	|	LW D15, A0, 4+	|	ADD D4, D4, AC2	|	AND D5, D4, D6	|	UNPACK2 AC2, D15	}
	{	ADDI R1, R1, -1	|	EXTRACTU D8, A2, D14	|	ADD D4, D4, AC3	|	LNW A2, A6, A7	|	SUB AC0, AC7, AC2	}
	{	SGTI R7, P2, P3, R1, 0	|	SRAI A7, D4, 3	|	SLL D8, D8, AC0	|	SH D8, A5, 4+	|	PERMH2 D14, AC2, D5, 2, 0	}
	{	NOP	|	AND D5, D4, D6	|	UNPACK2 AC2, D15	|	LNW D15, A0, 4+	|	ADD D4, D4, AC2	}
	{	NOP	|	LNW A2, A6, A7	|	SUB AC0, AC7, AC2	|	EXTRACTU D8, A2, D14	|	ADD D4, D4, AC3	}
	{	NOP	|	SH D8, A5, 4+	|	PERMH2 D14, AC2, D5, 2, 0	|	SRAI A7, D4, 3	|	SLL D8, D8, AC0	}
	{	NOP	|	NOP	|	NOP	|	SH D8, A5, 4+	|	NOP	}
	
	 
  { NOP | NOP | NOP | NOP | NOP }
  { NOP | NOP | NOP | NOP | NOP }  
  { NOP | NOP | NOP | NOP | NOP }

	{	TRAP	|	NOP	|	NOP	|	NOP	|	NOP	}
